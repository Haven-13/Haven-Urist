# There are two ways to configure/add standard cases to test:
# Short:
# - method: [num, 'name/message', 'regex pattern']
#
# Verbose:
# - target:
#     method: num
#   message: name/message
#   pattern: regex pattern
#
# Short requires quotation marks for the strings, the verbose must not have quotation marks
# else the pattern and name/message will be parsed wrong and can break the script.
# Single-quotes are recommended because they allow special characters and won't parse escapes
#
# Verbose is more extensible and flexible, while short is not and is a fixed pattern as
# shown above.
#
# There are currently only two methods:
#   exactly: result == target -- fail otherwise
#   no_more: result <= target -- warn when below target, fail otherwise
#

standards:
  - exactly: [0, 'mangled characters', '[\u0000\uFFFF\uFFFD]']
  - exactly: [0, 'escapes', '\\\\(red|blue|green|black|b|i[^mc])']
  - exactly: [6, 'Del()s', '\WDel\(']

  - exactly: [2, '/atom text paths', '"/atom']
  - exactly: [2, '/area text paths', '"/area']
  - exactly: [2, '/datum text paths', '"/datum']
  - exactly: [2, '/mob text paths', '"/mob']
  - exactly: [19, '/obj text paths', '"/obj']
  - exactly: [8, '/turf text paths', '"/turf']
  - exactly: [28, 'text2path uses', 'text2path']

  - exactly: [0, 'world<< uses', 'world[ \t]*<<']
  - exactly: [0, 'world.log<< uses', 'world.log[ \t]*<<']
  - no_more: [207, 'to_world() uses', 'to_world\(']
  - no_more: [71, 'to_world_log() uses', 'to_world_log\(']

  - exactly: [14, 'non-bitwise << uses', '(?<!\d)(?<!\d\s)(?<!<)<<(?!=|\s\d|\d|<|\/)']
  - exactly: [0, 'incorrect indentations', '^(?:  +)(?!\*)']
  - exactly: [0, 'superflous whitespace', '[ \t]+$']
  - exactly: [8, 'mixed indentation', '^( +\t+|\t+ +)']

  - no_more: [1422, 'indentions inside defines', '^(\s*)#define (\w*)( {2,}| ?\t+)(?!(\/\/|\/\*))']
